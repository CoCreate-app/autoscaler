---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-haproxy
spec: {}
status: {}
---
---
kind: Service
apiVersion: v1
metadata:
  name: cocreate-api-haproxy
  namespace: default
  labels:
    app: cocreate-api
  annotations:
    haproxy.org/load-balance: uri
spec:
  ports:
    - name: app
      protocol: TCP
      port: 3002
      targetPort: 3002
  selector:
    app: cocreate-api
  type: ClusterIP
  sessionAffinity: None
---
kind: Service
apiVersion: v1
metadata:
  name: cocreatecrdtws-haproxy
  namespace: default
  labels:
    app: cocreatecrdtws
  annotations:
    haproxy.org/load-balance: uri
spec:
  ports:
    - name: crdt
      protocol: TCP
      port: 3001
      targetPort: 3001
  selector:
    app: cocreatecrdtws
  type: ClusterIP
  sessionAffinity: None
---
kind: Service
apiVersion: v1
metadata:
  name: cocreatews-haproxy
  namespace: default
  labels:
    app: cocreatews
  annotations:
    haproxy.org/load-balance: uri
spec:
  ports:
    - name: app
      protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app: cocreatews
  type: ClusterIP
  sessionAffinity: None
---
kind: Service
apiVersion: v1
metadata:
  name: cocreatews-haproxy-rr
  namespace: default
  labels:
    app: cocreatews
  annotations:
    haproxy.org/load-balance: roundrobin
spec:
  ports:
    - name: app
      protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app: cocreatews
  type: ClusterIP
  sessionAffinity: None
---
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: cocreatews-haproxy
  namespace: default
  labels:
    app: cocreatews
  annotations:
    haproxy.org/ingress.class: "haproxy"
spec:
  tls:
    - hosts:
        - '*.cocreate.app'
      secretName: cocreate-app
  rules:
    - host: '*.cocreate.app'
      http:
        paths:
          - path: /ws
            pathType: ImplementationSpecific
            backend:
              service:
                name: cocreatews-haproxy
                port:
                  number: 3000
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: cocreatews-haproxy-rr
  namespace: default
  labels:
    app: cocreatews
  annotations:
    haproxy.org/ingress.class: "haproxy"
spec:
  tls:
    - hosts:
        - '*.cocreate.app'
      secretName: cocreate-app
  rules:
    - host: '*.cocreate.app'
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: cocreatews-haproxy-rr
                port:
                  number: 3000
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: cocreatecrdtws-haproxy
  namespace: default
  labels:
    app: cocreatecrdtws
  annotations:
    haproxy.org/ingress.class: "haproxy"
spec:
  tls:
    - hosts:
        - '*.cocreate.app'
      secretName: cocreate-app
  rules:
    - host: '*.cocreate.app'
      http:
        paths:
          - path: /crdt
            pathType: ImplementationSpecific
            backend:
              service:
                name: cocreatecrdtws-haproxy
                port:
                  number: 3001
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: cocreate-api-haproxy
  namespace: default
  labels:
    app: cocreate-api
  annotations:
    haproxy.org/ingress.class: "haproxy"
spec:
  tls:
    - hosts:
        - '*.cocreate.app'
      secretName: cocreate-app
  rules:
    - host: '*.cocreate.app'
      http:
        paths:
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: cocreate-api-haproxy
                port:
                  number: 3002
---
---
# Source: kubernetes-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-kubernetes-ingress
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
---
# Source: kubernetes-ingress/templates/default-backend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-kubernetes-ingress-default-backend
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
---
# Source: kubernetes-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ingress-kubernetes-ingress
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
data:
  syslog-server: address:stdout, facility:daemon,
  maxconn: "100000"
---
# Source: kubernetes-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: haproxy-ingress-kubernetes-ingress
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - services
  - namespaces
  - events
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses
  - ingresses/status
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses/status
  verbs:
  - update
---
# Source: kubernetes-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: haproxy-ingress-kubernetes-ingress
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-ingress-kubernetes-ingress
subjects:
- kind: ServiceAccount
  name: haproxy-ingress-kubernetes-ingress
  namespace: ingress-haproxy
---
# Source: kubernetes-ingress/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: haproxy-ingress-kubernetes-ingress-default-backend
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: haproxy-ingress-kubernetes-ingress-default-backend
    app.kubernetes.io/instance: haproxy-ingress
---
# Source: kubernetes-ingress/templates/controller-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: haproxy-ingress-kubernetes-ingress
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
spec:
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-ingress
      app.kubernetes.io/instance: haproxy-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernetes-ingress
        app.kubernetes.io/instance: haproxy-ingress
    spec:
      serviceAccountName: haproxy-ingress-kubernetes-ingress
      terminationGracePeriodSeconds: 300
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      priorityClassName: system-cluster-critical
      containers:
        - name: kubernetes-ingress-controller
          image: "haproxytech/kubernetes-ingress:1.5.3"
          imagePullPolicy: IfNotPresent
          args:
          - --configmap=ingress-haproxy/haproxy-ingress-kubernetes-ingress
          - --default-backend-service=ingress-haproxy/haproxy-ingress-kubernetes-ingress-default-backend
          - --ingress.class=haproxy
          - --log=info
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: stat
              containerPort: 1024
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 1042
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 1042
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /healthz
              port: 1042
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
      initContainers:
        - command:
          - /bin/sh
          - -c
          - sysctl -w net.core.somaxconn=100000
          - sysctl -w net.ipv4.tcp_max_syn_backlog=100000
          - sysctl -w net.core.netdev_max_backlog=100000
          image: busybox:musl
          name: sysctl
          securityContext:
            privileged: true
      nodeSelector:
        nodeType: loadbalancer
---
# Source: kubernetes-ingress/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-ingress-kubernetes-ingress-default-backend
  namespace: ingress-haproxy
  labels:
    app.kubernetes.io/name: kubernetes-ingress
    helm.sh/chart: kubernetes-ingress-1.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: haproxy-ingress
    app.kubernetes.io/version: 1.5.3
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: haproxy-ingress-kubernetes-ingress-default-backend
      app.kubernetes.io/instance: haproxy-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: haproxy-ingress-kubernetes-ingress-default-backend
        app.kubernetes.io/instance: haproxy-ingress
    spec:
      priorityClassName: system-cluster-critical
      containers:
        - name: kubernetes-ingress-default-backend
          image: "k8s.gcr.io/defaultbackend-amd64:1.5"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
      nodeSelector:
        nodeType: loadbalancer
      serviceAccountName: haproxy-ingress-kubernetes-ingress-default-backend
      terminationGracePeriodSeconds: 60